package com.school.attendance.config;

import com.school.attendance.entity.User;
import com.school.attendance.entity.Role;
import com.school.attendance.entity.School;
import com.school.attendance.service.UserService;
import com.school.attendance.repository.SchoolRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

/**
 * Initializes demo data for the School Attendance System
 * Creates demo users and a sample school for testing purposes
 */
@Component
public class DataInitializer implements CommandLineRunner {

    private static final Logger logger = LoggerFactory.getLogger(DataInitializer.class);

    @Autowired
    private UserService userService;

    @Autowired
    private SchoolRepository schoolRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Override
    public void run(String... args) throws Exception {
        logger.info("Initializing demo data...");

        try {
            // Create demo school if none exists
            if (schoolRepository.count() == 0) {
                createDemoSchool();
            }

            // Create demo users if none exist
            if (!userService.existsByUsername("admin")) {
                createDemoUsers();
            } else {
                logger.info("Demo users already exist, skipping initialization");
            }

            logger.info("Demo data initialization completed successfully");

        } catch (Exception e) {
            logger.error("Error during demo data initialization: {}", e.getMessage(), e);
        }
    }

    private void createDemoSchool() {
        try {
            School demoSchool = new School();
            demoSchool.setName("Demo High School");
            demoSchool.setAddress("123 Education Street, Learning City, ED 12345");
            demoSchool.setContactEmail("info@demohighschool.edu");
            demoSchool.setContactPhone("+1-555-0123");
            
            School savedSchool = schoolRepository.save(demoSchool);
            logger.info("Created demo school: {} (ID: {})", savedSchool.getName(), savedSchool.getId());
        } catch (Exception e) {
            logger.error("Error creating demo school: {}", e.getMessage(), e);
        }
    }

    private void createDemoUsers() {
        try {
            // Create Admin User
            User admin = new User();
            admin.setUsername("admin");
            admin.setPassword("admin123");
            admin.setEmail("admin@demohighschool.edu");
            admin.setFullName("System Administrator");
            admin.setRole(Role.ADMIN);
            admin.setIsActive(true);
            admin.setReferenceId(null); // Admin doesn't have a reference to other entities
            
            User savedAdmin = userService.createUser(admin);
            logger.info("Created demo admin user: {} (ID: {})", savedAdmin.getUsername(), savedAdmin.getId());

            // Create Teacher User
            User teacher = new User();
            teacher.setUsername("teacher");
            teacher.setPassword("teacher123");
            teacher.setEmail("teacher@demohighschool.edu");
            teacher.setFullName("Demo Teacher");
            teacher.setRole(Role.TEACHER);
            teacher.setIsActive(true);
            teacher.setReferenceId(null); // Will be linked to teacher entity later
            
            User savedTeacher = userService.createUser(teacher);
            logger.info("Created demo teacher user: {} (ID: {})", savedTeacher.getUsername(), savedTeacher.getId());

            // Create Student User
            User student = new User();
            student.setUsername("student");
            student.setPassword("student123");
            student.setEmail("student@demohighschool.edu");
            student.setFullName("Demo Student");
            student.setRole(Role.STUDENT);
            student.setIsActive(true);
            student.setReferenceId(null); // Will be linked to student entity later
            
            User savedStudent = userService.createUser(student);
            logger.info("Created demo student user: {} (ID: {})", savedStudent.getUsername(), savedStudent.getId());

            logger.info("Demo users created successfully!");
            logger.info("Login credentials:");
            logger.info("  Admin: admin / admin123");
            logger.info("  Teacher: teacher / teacher123");
            logger.info("  Student: student / student123");

        } catch (Exception e) {
            logger.error("Error creating demo users: {}", e.getMessage(), e);
        }
    }
}
